
# PAOLA TERRAZAS
# CS2302 
# FINDING THE MEDIAN OF A LIST USING SORTING METHODS
# DR. FUENTES
# TA - ANINDITA NATH
# 2.20.2019




#Node Functions
class Node(object):
    # Constructor
    def __init__(self, item, next=None):  
        self.item = item
        self.next = next 
        
def PrintNodes(N):
    if N != None:
        print(N.item, end=' ')
        PrintNodes(N.next)
        
def PrintNodesReverse(N):
    if N != None:
        PrintNodesReverse(N.next)
        print(N.item, end=' ')
        
#List Functions
class List(object):   
    # Constructor
    def __init__(self): 
        self.head = None
        self.tail = None
        
def IsEmpty(L):  
    return L.head == None   

def GetLength(L):
    # Returns the number of items in list
    temp = L.head # the temp is what will go through the list BEGINNING at the head
    count = 0 # your iterator BEGINNING at 0 need to initialize 
    while temp is not None:
        count += 1
        temp = temp.next
    return count  
        
def Append(L,x): 
    # Inserts x at end of list L
    if IsEmpty(L):
        L.head = Node(x)
        L.tail = L.head
    else:
        L.tail.next = Node(x)
        L.tail = L.tail.next
        
def InsertAfter(L,x,item):

    s = Search(L,x)
    if s in None:
        Append(L,item)
    else:
        s.next = Node(item,s.next)
        
def Sort(L):
    change = True
    while change:
        t = L.head
        change = False
        while t.next is not None:
            if t.item > t.next.item:
                temp = t.item
                t.item = t.next.item
                t.next.item = temp
                change = True
            t = t.next
            
def Search(L,x):
    temp = L.head
    while temp is not None:
        if temp.item == x:
            return temp
        temp = temp.next
    return None
        
        
def Prepend(L,x):
    if IsEmpty(L):
        L.head = Node(x)
        L.tail = L.head
    else:
        L.head = Node(x,L.head)
        
def Print(L):
    # Prints list L's items in order using a loop
    temp = L.head
    while temp is not None:
        print(temp.item, end=' ')
        temp = temp.next
    print()  # New line 

def PrintRec(L):
    # Prints list L's items in order using recursion
    PrintNodes(L.head)
    print() 
    
def Remove(L,x):
    # Removes x from list L
    # It does nothing if x is not in L
    if L.head==None:
        return
    if L.head.item == x:
        if L.head == L.tail: # x is the only element in list
            L.head = None
            L.tail = None
        else:
            L.head = L.head.next
    else:
         # Find x
         temp = L.head
         while temp.next != None and temp.next.item !=x:
             temp = temp.next
         if temp.next != None: # x was found
             if temp.next == L.tail: # x is the last node
                 L.tail = temp
                 L.tail.next = None
             else:
                 temp.next = temp.next.next
         
def PrintReverse(L):
    # Prints list L's items in reverse order
    PrintNodesReverse(L.head)
    print() 
    
def bubbleSort(myList):
    current = myList.head
    while current is not None:
        prev = current.next
        while prev is not None:
            if prev.item < current.item:
                temp = current.item
                current.item = prev.item
                prev.item = temp
            prev = prev.next
        current = current.next
        
def median(L):
    mid = GetLength(L) //2
    return mid

    
def ElementAt(L,x):
    temp = L.head
    count = 0
    while count < x:
        temp = temp.next
        count += 1
    return temp

def quick_sort(L,head,tail):
    if head < tail:
        split = partition(L,head,tail)
        
        quick_sort(L,head,split-1)
        quick_sort(L,split+1,tail)
        
   
def partition(L,head,tail):
    count = 0
    temp = ElementAt(L,head)
    pivot = temp
    leftside = head + 1
    rightside = tail
    piv = ElementAt(L,tail)
    right = ElementAt(L,tail)
    sorted = False
    while not sorted:
        if right.item < piv.item:
            p = piv.item
            piv.item = right.item
            right.item = p
        while leftside <= rightside and piv is not None and piv.item <= pivot.item:
            count = count + 1
            leftside = leftside + 1
            piv = piv.next
        while right.item > pivot.item and rightside >= leftside:
            count = count + 1
            rightside = rightside -1
            right = ElementAt(L,rightside)
        if rightside < leftside:
            sorted = True
    p = pivot.item
    pivot.item = right.item
    right.item = p
    return rightside

    
def mergeLists(list_one, list_two):
    temp = None
    if list_one is None:
        return list_two
    if list_two is None:
        return list_one
    if list_one.item <= list_two.item:
        temp = list_one
        temp.next = mergeLists(list_one.next, list_two)
    else:
        temp = list_two
        temp.next = mergeLists(list_one, list_two.next)
    return temp

def mergeSort(head):
    if head is None or head.next is None:
        return head
    list_one, list_two = divideLists(head)
    list_one = mergeSort(list_one)
    list_two = mergeSort(list_two)
    head = mergeLists(list_one, list_two)
    return head

# Defining function which will divide a linked list into two equal linked lists
def divideLists(head):
    first = head #first is a pointer to reach the mid of linked list
    last = head #last is a pointer to reach the end of the linked list
    if last:
        last = last.next            
    while last:
        last = last.next #last is incremented twice while first is incremented once per loop
        if last:
            last = last.next
            first = first.next
    mid = first.next
    first.next = None
    return head, mid

L = List()
Append(L,6)
Append(L,5)
Append(L,4)
Append(L,80)
Append(L,47)
Append(L,23)
Append(L,87)

L2 = List()
Append(L2,6)
Append(L2,5)
Append(L2,4)
Append(L2,8)

L3 = List() 
Append(L3,20)
Append(L3,10)
Append(L3,50)
Append(L3,40)
Append(L3,30)


    
    
print("BEFORE BUBBLESORT")
Print(L)
print(bubbleSort(L))
print("AFTER BUBBLESORT")
Print(L)

print("Head")
print(L.head.item)
print("Tail")
print(L.tail.item)

print("The median is")
middle = median(L)
temp = L.head
for i in range(middle):
    temp = temp.next 
    #print(temp.item)
print(temp.item) 


print ("BEFORE MERGESORT")
Print(L3)                     
L3.head = mergeSort(L3.head)    
print ("AFTER MERGESORT")
Print(L3) 


print("The median is")
middle = median(L3)
temp = L3.head
for i in range(middle):
    temp = temp.next 
    #print(temp.item)
print(temp.item) 


print("BEFORE QUICKSORT")
Print(L2)
print(quick_sort(L2,0,GetLength(L2)-1))
print("AFTER QUICKSORT")
Print(L2)

print("Head")
print(L2.head.item)
print("Tail")
print(L2.tail.item)

print("The median is")
middle = median(L2)
temp = L2.head
for i in range(middle):
    temp = temp.next 
    #print(temp.item)
print(temp.item) 

