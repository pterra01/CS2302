# PAOLA TERRAZAS
# CS2302 
# Solve mazes
# DR. FUENTES
# TA - ANINDITA NATH
# 5.1.2019


import matplotlib.pyplot as plt
import numpy as np
import random
import time

def draw_maze(walls,maze_rows,maze_cols,cell_nums=False):
    fig, ax = plt.subplots()
    for w in walls:
        if w[1]-w[0] ==1: #vertical wall
            x0 = (w[1]%maze_cols)
            x1 = x0
            y0 = (w[1]//maze_cols)
            y1 = y0+1
        else:#horizontal wall
            x0 = (w[0]%maze_cols)
            x1 = x0+1
            y0 = (w[1]//maze_cols)
            y1 = y0  
        ax.plot([x0,x1],[y0,y1],linewidth=1,color='k')
    sx = maze_cols
    sy = maze_rows
    ax.plot([0,0,sx,sx,0],[0,sy,sy,0,0],linewidth=2,color='k')
    if cell_nums:
        for r in range(maze_rows):
            for c in range(maze_cols):
                cell = c + r*maze_cols   
                ax.text((c+.5),(r+.5), str(cell), size=10,
                        ha="center", va="center")
    ax.axis('off') 
    ax.set_aspect(1.0)

def wall_list(maze_rows, maze_cols):
    # Creates a list with all the walls in the maze
    w =[]
    for r in range(maze_rows):
        for c in range(maze_cols):
            cell = c + r*maze_cols
            if c!=maze_cols-1:
                w.append([cell,cell+1])
            if r!=maze_rows-1:
                w.append([cell,cell+maze_cols])
    return w

def numOfSets(S):
    n =0
    for i in range(len(S)):
        if S[i] <0:
            n+=1
    return n


def DisjointSetForest(size):
    return np.zeros(size,dtype=np.int)-1
        
def find(S,i):
    if S[i]<0:
        return i
    return find(S,S[i])

def find_c(S,i):
    if S[i] <= 0:
        return i
    s = i
    while S[i] >= 0:
         i = S[i]     
    root = i
    while S[s] >= 0:
        p = S[s]
        S[s] = root
        s = p
    return root

def compMaze(row,col,S,walls):
    while numOfSets(S)>1:
        c = random.randint(0,(len(walls)-1))
        if find_c(S,walls[c][0])!= find_c(S,walls[c][1]):
            union(S,walls[c][0],walls[c][1])
            walls.pop(c)


def adjList(l,v,y):
    l[v].append(y)
    l[y].append(v)
    

def union(S,i,j):
    ri = find_c(S,i) 
    rj = find_c(S,j) 
    if ri!=rj: 
        S[rj] = ri  
        
        
def normalMaze(row,col,S,walls):
    count = 0
    maze = (maze_rows*maze_cols)-1
    while count < maze:
        c = random.randint(0,(len(walls)-1))
        if find(S,walls[c][0])!= find(S,walls[c][1]):
            adjList(l,walls[c][0],walls[c][1])
            union(S,walls[c][0],walls[c][1])
            walls.pop(c)
            count +=1
            
def printPath(prev,v):
    if prev[v] != -1:
        printPath(prev,prev[v])
    print(v)
            
def breadthFirst(G,v):
    q = []
    visited = [False for i in range(len(G))]
    previous = [-1 for i in range(len(G))]
    q.insert(0,v)
    visited[v] = True
    while len(q) is not 0:
        queue = q.pop(0)
        for i in G[queue]:
            if visited[i] is False:
                visited[i] = True
                previous[i] = queue
                q.insert(0,i)
    return previous

def depthFirst(G,v):
    visited = []
    stack = [v]
    while stack != []:
        u = stack.pop()
        for i in G[u]:
            if i not in visited:
                stack.append(i)
            visited.append(u)
    return visited

        
        

plt.close("all") 
maze_rows = 10
maze_cols = 15

walls = wall_list(maze_rows,maze_cols)
S = DisjointSetForest(maze_rows*maze_cols)
l = [[] for i in range(maze_rows*maze_cols)]


starttime = time.time()
print("Breadth first search ") 
normalMaze(maze_rows, maze_cols,S,walls)  
    
B = breadthFirst(l,0)
printPath(B,len(l)-1)
endtime = time.time()
print('Running time is', endtime-starttime, 'seconds')


#starttime = time.time()
#print("Depth first search ") 
#normalMaze(maze_rows, maze_cols,S,walls)  
    

#printPath(D,len(l)-1)
#endtime = time.time()
#print()
#print('Running time is', endtime-starttime, 'seconds')
#print()
draw_maze(walls,maze_rows,maze_cols,cell_nums=True) 
