
# PAOLA TERRAZAS
# CS2302 
# BTREE
# DR. FUENTES
# TA - ANINDITA NATH
# 3.24.2019
# LEARNING TO WORK WITH B TREES AND ALL OF ITS FUNCTIONS


import math 

class BTree(object):
    # Constructor
    def __init__(self,item=[],child=[],isLeaf=True,max_items=5):  
        self.item = item
        self.child = child 
        self.isLeaf = isLeaf
        if max_items <3: #max_items must be odd and greater or equal to 3
            max_items = 3
        if max_items%2 == 0: #max_items must be odd and greater or equal to 3
            max_items +=1
        self.max_items = max_items

def FindChild(T,k):
    # Determines value of c, such that k must be in subtree T.child[c], if k is in the BTree    
    for i in range(len(T.item)):
        if k < T.item[i]:
            return i
    return len(T.item)
             
def InsertInternal(T,i):
    # T cannot be Full
    if T.isLeaf:
        InsertLeaf(T,i)
    else:
        k = FindChild(T,i)   
        if IsFull(T.child[k]):
            m, l, r = Split(T.child[k])
            T.item.insert(k,m) 
            T.child[k] = l
            T.child.insert(k+1,r) 
            k = FindChild(T,i)  
        InsertInternal(T.child[k],i)   
            
def Split(T):
    #print('Splitting')
    #PrintNode(T)
    mid = T.max_items//2
    if T.isLeaf:
        leftChild = BTree(T.item[:mid]) 
        rightChild = BTree(T.item[mid+1:]) 
    else:
        leftChild = BTree(T.item[:mid],T.child[:mid+1],T.isLeaf) 
        rightChild = BTree(T.item[mid+1:],T.child[mid+1:],T.isLeaf) 
    return T.item[mid], leftChild,  rightChild   
      
def InsertLeaf(T,i):
    T.item.append(i)  
    T.item.sort()

def IsFull(T):
    return len(T.item) >= T.max_items

def Insert(T,i):
    if not IsFull(T):
        InsertInternal(T,i)
    else:
        m, l, r = Split(T)
        T.item =[m]
        T.child = [l,r]
        T.isLeaf = False
        k = FindChild(T,i)  
        InsertInternal(T.child[k],i)   
        
        
def height(T):
    if T.isLeaf:
        return 0
    return 1 + height(T.child[0])
        
        
def Search(T,k):
    # Returns node where k is, or None if k is not in the tree
    if k in T.item:
        return T
    if T.isLeaf:
        return None
    return Search(T.child[FindChild(T,k)],k)
                  
def Print(T):
    # Prints items in tree in ascending order
    if T.isLeaf:
        for t in T.item:
            print(t,end=' ')
    else:
        for i in range(len(T.item)):
            Print(T.child[i])
            print(T.item[i],end=' ')
        Print(T.child[len(T.item)])    
 
def PrintD(T,space):
    # Prints items and structure of B-tree
    if T.isLeaf:
        for i in range(len(T.item)-1,-1,-1):
            print(space,T.item[i])
    else:
        PrintD(T.child[len(T.item)],space+'   ')  
        for i in range(len(T.item)-1,-1,-1):
            print(space,T.item[i])
            PrintD(T.child[i],space+'   ')
    
def SearchAndPrint(T,k):
    node = Search(T,k)
    if node is None:
        print(k,'not found')
    else:
        print(k,'found',end=' ')
        print('node contents:',node.item)
        
        
        
        
def Smallest(T):
    if T.isLeaf:
        return T.item[0]
    return Smallest(T.child[0])
    
def NumItems(T):
    if T.isLeaf:
        return len(T.item)
    count = len(T.item)
    for i in range(len(T.child)):
        count += NumItems(T.child[i])
    return count


    

def Largest(T):
    if T.isLeaf:
        return T.item[-1]
    return Largest(T.child[-1].child[-1])


# 1) compute the height of tree
def TreeHeight(T):
    if T.isLeaf:
        return 0
    return 1 + TreeHeight(T.child[0])

# 2) extract items in tree into sorted list
def TreetoList(T):
    if T.isLeaf:
        return T.item
    else:
        List = []
        for i in range(len(T.item)):
            List = List + TreetoList(T.child[i]) + [T.item[i]]
    return List + TreetoList(T.child[-1])

# 3) min element in tree at given depth d
    
def SmallestAtDepthD(T,d):
    if d == 0:
        return T.item[0]
    if d > 0 and T.isLeaf:
        return -math.inf
    return SmallestAtDepthD(T.child[0],d-1)
        
# 4) max element in tree at given depth d
def LargestAtDepthD(T,d):
    if d == 0:
        return T.item[-1]
    if d > 0 and T.isLeaf:
        return -math.inf
    return LargestAtDepthD(T.child[-1],d-1)

# 5) return the number of nodes in tree at given depth d 
    
def NodesAtDepthD(T,d): 
    if d==0:
        return len(T.item)
    if not T.isLeaf:
        return NodesAtDepthD(T.child[0],d-1)+ NodesAtDepthD(T.child[-1],d-1)
    
# 6) print all items in tree at given depth d 
def PrintAtDepth(T,d):
    if d==0:
        for i in T.item:
            print(i,end=' ')
    if not T.isLeaf:
        for i in range(len(T.child)):
            PrintAtDepth(T.child[i],d-1)
          
# 7) return number of nodes in tree that are full
def fullNodes(T):
    count = 0
    if len(T.item) == T.max_items:
        count = count + 1
    return count
    
# 8) return number of leaves in tree that are full
    
def fullLeaves(T):
    count = 0
    if not T.isLeaf:
        return 0
    else:
        if len(T.isLeaf) == T.max_items:
            count = count + 1    
    return count
    
# 9) return the depth at which k is found in the tree, -1 if k is not in tree

def FindDepthK(T, k):
    if k in T.item:
        return 0
    depth = 0
    if k > T.item[len(T.item)-1]:
        depth = FindDepthK(T.child[len(T.item)], k)
    elif k < T.item[0]:
        depth = FindDepthK(T.child[0], k)
    if depth >= 0: 
        return 1 + depth
    else:
        return -1

   
L = [30, 50, 10, 20, 60, 70, 100, 40, 90, 80, 110, 120, 1, 11 , 3, 4, 5,105, 115, 200, 2, 45, 6]
T = BTree()    
for i in L:
    print('Inserting',i)
    Insert(T,i)
    PrintD(T,'') 
    #Print(T)
    print('\n####################################')
    
#SearchAndPrint(T,60)
#SearchAndPrint(T,200)
#SearchAndPrint(T,25)
#SearchAndPrint(T,20)

#print("LargestAtDepthD")
#print(LargestAtDepthD(T,2))
#print(height(T))
#print(Largest(T))
#print(Smallest(T))
#print("NumItems")
#print(NumItems(T))

#print(T.item[0])
#print(T.child[0].item[2])
#print(len(T.child[1].item))
#print(T.child[0].child[1].item)
#print(T.child[0].child[2].item)


print(TreeHeight(T))
print(TreetoList(T))
print(SmallestAtDepthD(T, 1))
print(LargestAtDepthD(T, 1))
print(NodesAtDepthD(T,2))
PrintAtDepth(T,1)
print()
print(fullNodes(T))
print(fullLeaves(T))
print(FindDepthK(T, 70))
